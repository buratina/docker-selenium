name: Get Latest Upstream
description: Get the latest upstream release of Selenium
inputs:
  release:
    description: 'Test a new release process'
    required: false
    type: boolean
    default: false
  gh_cli_token:
    description: 'GitHub CLI authentication token'
    required: true
    type: secret

runs:
  using: "composite"
  steps:
    - name: Get latest upstream
      shell: bash
      run: |
        sudo apt update
        sudo apt install jq
        AUTH_HEADER="Authorization: token ${{ inputs.gh_cli_token }}"
        if [ "${{ inputs.release }}" = "true" ]; then
          echo "Getting the latest stable release."
          RELEASE=$(curl -s -H "$AUTH_HEADER" https://api.github.com/repos/SeleniumHQ/selenium/releases | jq -r '[.[] | select(.prerelease == false)] | .[0].tag_name')
        else
          echo "Getting the latest Nightly release."
          RELEASE=$(curl -s -H "$AUTH_HEADER" https://api.github.com/repos/SeleniumHQ/selenium/releases | jq -r '[.[] | select(.prerelease == true)] | .[0].tag_name' || echo "")
          if [ -z "${RELEASE}" ]; then
            echo "Nightly release not found, getting the latest stable release."
            RELEASE=$(curl -s -H "$AUTH_HEADER" https://api.github.com/repos/SeleniumHQ/selenium/releases | jq -r '[.[] | select(.prerelease == false)] | .[0].tag_name')
          fi
        fi
        jar_file=$(curl -s -H "$AUTH_HEADER" https://api.github.com/repos/SeleniumHQ/selenium/releases/tags/${RELEASE} | jq -r '.assets[] | select(.name | endswith(".jar")) | .name' | tail -n 1)
        echo "Server package: ${jar_file}"
        VERSION=$(echo $jar_file | sed 's/selenium-server-//;s/\.jar//')
        echo "BASE_RELEASE=${RELEASE} | BASE_VERSION=${VERSION} | VERSION=${VERSION}"
        echo "BASE_RELEASE=${RELEASE}" >> $GITHUB_ENV
        echo "BASE_VERSION=${VERSION}" >> $GITHUB_ENV
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
