# This is dummy values file for chart template testing
global:
  K8S_PUBLIC_IP: "10.10.10.10"
  seleniumGrid:
    logLevel: FINE
    affinity: &affinity
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - selenium
            topologyKey: "kubernetes.io/hostname"
    topologySpreadConstraints:
      - maxSkew: 4
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
    nodeMaxSessions: 3
    nodeEnableManagedDownloads: true
    nodeCustomCapabilities: "{'myApp:version':'beta','myApp:publish':'public'}"

selenium-grid:
  autoscaling:
    enableWithExistingKEDA: true
    scalingType: deployment

  monitoring:
    enabledWithExistingAgent: true
    additionalScrapeConfigs:
      value: |
        - job_name: "selenium-grid-analytics"
          metrics_path: "/query"
          bearer_token: ""
          params:
            endpoint:
              - '{{ template "seleniumGrid.monitoring.graphqlURL" $ }}'
            query:
              - |
                { grid { sessionCount, maxSession, totalSlots, nodeCount, sessionQueueSize }, nodesInfo { nodes { id, status, sessionCount, maxSession, slotCount, stereotypes, sessions { id, capabilities, sessionDurationMillis, slot { id, stereotype } } } }, sessionsInfo { sessionQueueRequests } }
            zoneTag: []
          tls_config:
            insecure_skip_verify: true
          static_configs:
            - targets:
                - '{{ template "seleniumGrid.monitoring.exporter.fullname" $ }}:{{ $.Values.monitoring.exporter.port }}'

  basicAuth:
    create: false
    nameOverride: "my-external-basic-auth-secret"
    enabled: true
    username: sysadmin
    password: strongPassword

  tls:
    enabled: true
    generateTLS: false

  ingress:
    nginx:
      proxyTimeout: 360 # Set different proxy timout
      proxyBuffer:
        # size: 512M # Keep using sub-config default
        number: ! # Disable sub-config
    annotations: # Add you own annotations
      nginx.ingress.kubernetes.io/use-regex: "true" # Add new key
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/app-root: &gridAppRoot "/selenium/"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600" # Override default key
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600" # Override default key
    hostname: ""
    ports:
      http: 8081
      https: 8443
    paths:
      - path: /selenium(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: '{{ ternary (include "seleniumGrid.router.fullname" $ ) (include "seleniumGrid.hub.fullname" $ ) $.Values.isolateComponents }}'
            port:
              number: 4444
      - path: /(/?)(session/.*/se/vnc)
        pathType: ImplementationSpecific
        backend:
          service:
            name: '{{ ternary (include "seleniumGrid.router.fullname" $ ) (include "seleniumGrid.hub.fullname" $ ) $.Values.isolateComponents }}'
            port:
              number: 4444
    tls:
      - hosts:
          - '*.my.domain.com'

  isolateComponents: true

  components:
    router:
      subPath: *gridAppRoot
      disableUI: true
      serviceType: NodePort
      extraEnvironmentVariables:
        - name: SE_JAVA_OPTS
          value: "-Xmx1g"
    distributor:
      newSessionThreadPoolSize: 24
      serviceType: NodePort
      extraEnvironmentVariables:
        - name: SE_JAVA_OPTS
          value: "-Xmx1g"
    eventBus:
      serviceType: NodePort
      extraEnvironmentVariables:
        - name: SE_JAVA_OPTS
          value: "-Xmx1g"
    sessionQueue:
      serviceType: NodePort
      extraEnvironmentVariables:
        - name: SE_JAVA_OPTS
          value: "-Xmx1g"
    sessionMap:
      serviceType: NodePort
      extraEnvironmentVariables:
        - name: SE_JAVA_OPTS
          value: "-Xmx1g"
      externalDatastore:
        enabled: true
        backend: redis

  chromeNode:
    nodeMaxSessions: 2
    affinity: *affinity
    terminationGracePeriodSeconds: 7200
    service:
      enabled: true

  firefoxNode:
    nodeMaxSessions: 1
    affinity: *affinity
    terminationGracePeriodSeconds: 720
    service:
      enabled: true

  edgeNode:
    affinity: *affinity
    service:
      enabled: true
    videoRecorder:
      uploader:
        enabled: false

  relayNode:
    enabled: true

  videoRecorder:
    enabled: true
    uploader:
      enabled: true
      destinationPrefix: "s3://bucket-name"
      secrets:
        RCLONE_CONFIG_S3_TYPE: "s3"
        RCLONE_CONFIG_S3_PROVIDER: "AWS"
        RCLONE_CONFIG_S3_ENV_AUTH: "true"
        RCLONE_CONFIG_S3_REGION: "ap-southeast-1"
        RCLONE_CONFIG_S3_LOCATION_CONSTRAINT: "ap-southeast-1"
        RCLONE_CONFIG_S3_ACL: "private"
        RCLONE_CONFIG_S3_ACCESS_KEY_ID: "xxx"
        RCLONE_CONFIG_S3_SECRET_ACCESS_KEY: "xxx"
        RCLONE_CONFIG_S3_NO_CHECK_BUCKET: "true"

  nodeConfigMap:
    leftoversCleanup:
      enabled: true
    extraScripts:
      nodeCustomTask.sh: |
        #!/bin/bash
        echo "This is a custom task"

  recorderConfigMap:
    extraScripts:
      video.sh: |
        #!/bin/bash
        echo "This is override script"

  uploaderConfigMap:
    extraScripts:
      upload.sh: |
        #!/bin/bash
        echo "This is override script"
